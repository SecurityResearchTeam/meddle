

message MeddleHeader with 
    EntryInfo { Regex = @"(?<Timestamp>[-/\.\:0-9\s]+),(?<MessageType>[0-9a-zA-Z]+),(?<ProcessName>[0-9a-zA-Z]+),(?<ProcessId>[0-9a-fA-F]+),(?<Device>[^,]+),(?<Size>[0-9]+),(?<Data>[^,]+)", Multiline = parseContent }	: LogEntry
{
    DateTime Timestamp with EntryFieldInfo { IsTimestamp = true };
    string MessageType;
	string ProcessName;
	string ProcessId;
	string Device;
	string Size;
	string Data;
	array<byte> Decoded;

	bool parseContent(string line, LineContext context)
    {
    	var mh = Decode<MeddleHeader>(line, context);
        // Done parsing if the specified line is not in the name-value pair format
        if (mh == null) return false;


    	// Decode the last field as base64
    	int blockCount = mh.Data.Count / 4;
    	binary DecodedData = [] as binary;
    	for( int i = 0; i < blockCount; i++ )
    	{
    		array<byte> Block = [0, 0, 0];
    		byte Byte1 = ( ((bits(mh.Data[i*4 + 0] as int) as int) << 2) + (((bits(mh.Data[i*4 + 1] as int) as int) & 48) << 4) ) as byte;
   			byte Byte2 = ( (((bits(mh.Data[i*4 + 1] as int) as int) & 15) << 4) + (((bits(mh.Data[i*4 + 2] as int) as int) & 60) >> 2) ) as byte;
    		byte Byte3 = ( (((bits(mh.Data[i*4 + 2] as int) as int) & 3) << 6) + (bits(mh.Data[i*4 + 3] as int) as int)) as byte;

    		Block[0] = Byte1;
    		Block[1] = Byte2;
    		Block[2] = Byte2;
    		DecodedData += Block as binary;
    	}
    	Decoded = DecodedData as array<byte>;
    	Data = (DecodedData as array<byte>) as string;

    	return false; // Always one line
    }
}


int bits(int c)
{
	//char[] lookupTable=new char[64]
	//{  
	//	'A','B','C','D','E','F','G','H','I','J','K','L','M','N',
	//	'O','P','Q','R','S','T','U','V','W','X','Y', 'Z',
	//	'a','b','c','d','e','f','g','h','i','j','k','l','m','n',
	//	'o','p','q','r','s','t','u','v','w','x','y','z',
	//	'0','1','2','3','4','5','6','7','8','9','+','/'
	//};

	if( c >= 'A' as int || c <= 'Z' as int)
		return (c - ('A' as int)) as int;
	if( c >= 'a' as int || c <= 'z' as int)
		return (c - ('a' as int) + 26) as int;
    if( c >= '0' as int || c <= '9' as int)
        return (c - ('0' as int) + 26*2) as int;
    if( c == '+')
        return (26*2 + 10) as int;
    if( c == '/')
        return (26*2 + 10 + 1) as int;
	return 0;
}

